.\" MIT License
.\"
.\" Copyright (c) 2019-2020 Davidson Francis <davidsondfgl@gmail.com>
.\"
.\" Permission is hereby granted, free of charge, to any person obtaining a copy
.\" of this software and associated documentation files (the "Software"), to deal
.\" in the Software without restriction, including without limitation the rights
.\" to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
.\" copies of the Software, and to permit persons to whom the Software is
.\" furnished to do so, subject to the following conditions:
.\"
.\" The above copyright notice and this permission notice shall be included in all
.\" copies or substantial portions of the Software.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
.\" IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
.\" FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
.\" AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
.\" LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
.\" OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
.\" SOFTWARE.
.\"
.TH "PBD" "1" "2020-06-11" "v0.6" "pbd man page"
.SH NAME
pbd \- Printf Based Debugger
.SH SYNOPSIS
\fBpbd\fR [\fIoptions\fR] executable function_name [\fIexecutable_options\fR]
.SH DESCRIPTION
.PP
\fBPBD\fR is a C debugger for Linux systems, which aims to monitor all
global and local variables (of a specific function) and nicely print the
old/new values on the screen, as well as the place where the change has
occurred.
.PP
Focusing on performance, PBD can debug large amounts of variables in a small
amount of time, and when compared to classic debuggers such as GDB, it
achieves a speedup of up to 12x depending on the compiler version, GDB and
workloads used.
.SH OPTIONS
.IP "-h --help"
Display this information
.IP "-v --version"
Display the PBD version and copyright.
.IP "-s --show-lines"
Prints the line and line number of the code that was changed. By default,
only the line number is printed.
.IP "-x --context <num>"
Shows <num> lines before and after the code portion. This option is meant
to be used in conjunction with -s.
.IP "-l --only-locals"
Monitors only local variables (default: global + local)
.IP "-g --only-globals"
Monitors only global variables (default: global + local)
.IP "-i --ignore-list=var1,var2..."
Given a comma separated sequence of variables names, PBD will ignore them,
whether local or global. Options -i and -w are mutually exclusive.
.IP "-w --watch-list=var1,var2..."
Given a comma separated sequence of variables names, PBD will only watch them,
whether local or global. Options -i and -w are mutually exclusive.
.PP
\fIStatic Analysis options:\fR
.PP
PBD is able to do a previous static analysis in the C source code that
belongs to the monitored function, and thus, greatly improving the
debugging time. Note however, that this is an experimental feature.
.IP "-S --static"
Enables static analysis
.PP
Optional flags:
.IP "-D sym[=val]"
Defines 'sym' with value 'val'.
.IP "-U <sym>"
Defines 'sym' with value 'val'.
.IP "-I <dir>"
Add 'dir' to the include path.
.IP "--std=<std>"
Defines the language standard, supported values
are: c89, gnu89, c99, gnu99, c11 and gnu11.
(Default: gnu11)
.PP
\fISyntax highlighting options:\fR
.IP "-c --color"
Enables syntax highlight. This option only takes effect if used together with
--show-lines. Note that this option also requires a 256-color compatible
terminal.
.IP "-t --theme <theme-file>"
Select a theme file for the highlighting.
.PP
The following options are for PBD internals:
.IP "-d --dump-all"
Dump all information gathered by the executable: name, size, type, encoding,
location, its breakpoint list and etc...
.PP
\fI\'Unsafe\' options:\fR
.PP
The options below are meant to be used with caution, since
they could lead to wrong output.
.IP "--avoid-equal-statements"
If enabled, PBD will ignore all line statements that are 'duplicated', i.e:
belongs to the same liner number, regardless its address. Although this could
lead to a great speed up, this option may produce wrong output in certain
cases, like tracking loops and multiples changes in the same line. Note that,
in this case, PBD *will* note the changes, but will identify a wrong line
number, in most cases, a number greater than the expected.
.SH NOTES
.PP
At the current release (v0.6) PBD have some points that need some hightlights:
.PP
Supported compilers (others might work):
.RS 2
.IP \(em 2
GCC
.IP \(em 2
Clang
.RE
.PP
Architecture, OS and Language support:
.RS 2
.IP \(em 2
x86_64 at the moment
.IP \(em 2
Linux environments
.IP \(em 2
C language
.RE
.PP
DWARF Analysis:
.RS 2
.IP \(em 2
PBD only supports DWARF-2 standard, which means that the user \fB*must*\fR
build the target executable with \fI\-gdwarf\-2\fR flag.
.IP \(em 2
PBD do not support PIE executables, so all the target executables
\fB*should\fR be built with \fI\-no\-pie\fR flag, if the compiler
build PIE executables by default.
.RE
.PP
C Features:
.PP
Currently PBD lacks the following features from C language, and thus, they will
not be analyzed if present:
.RS 2
.IP \(em 2
Structures
.IP \(em 2
Unions
.RE
.SH BUGS
.PP
No known bugs.
.SH AUTHOR
.PP
Written by Davidson Francis (davidsondfgl@gmail.com), see
\fIcontributors\fR page in github.com/Theldus/PBD for more details.
