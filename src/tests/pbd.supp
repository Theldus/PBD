# PBD's Valgrind Supression File
#
# Unfortunately, libsparse 'leaks'* some memory while while handling
# include paths, more specifically in set_stream_include_path
# (pre-process.c) and init_stream (tokenize.c).
#
# Below you can find an excerpt of the stack trace generated by
# Valgrind (--leak-check=full --show-leak-kinds=all):
#
# 172 bytes in 11 blocks are still reachable in loss record 1 of 2
#    at 0x4C2CB1F: malloc (vg_replace_malloc.c:299)
#    by 0x40D6BB: set_stream_include_path (pre-process.c:891)
#    by 0x40D6BB: handle_include_path (pre-process.c:993)
# <snip>
#
#  2,880 bytes in 1 blocks are still reachable in loss record 2 of 2
#    at 0x4C2ED3F: realloc (vg_replace_malloc.c:785)
#    by 0x4149D5: init_stream (tokenize.c:310)
#    by 0x414D45: tokenize (tokenize.c:1016)
#    by 0x40C6A3: try_include (pre-process.c:923)
# <snip>
#
# * While some might argue that 'still reachable' are not _true_
# memory leaks, I don't like the idea of leaving memory to the OS,
# and thus, PBD will enforce an strong memory check, considering
# all kind of leaks as errors, unless otherwise stated (supression
# files).

{
   libsparse
   Memcheck:Leak
   match-leak-kinds: reachable
   ...
   fun:sparse
   ...
}
